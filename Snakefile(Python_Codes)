def get_sample_input(wildcards):
    checkpoint_output = checkpoints.download_FASTQ.get(**wildcards).output[0]
    return expand("results/amrfinder/{sample}/amrfinderplus.tsv", sample = glob_wildcards(os.path.join(checkpoint_output, "{sample}_1.fastq")).sample)

rule all:
    input:
        get_sample_input

rule get_SRR:
    input:
        "data/Biosample_all.txt"
    output:
        "results/runinfo_all.txt"
    log:
        "logs/get_SRR.log"
    shell:
        """
        ~/edirect/epost -db biosample -input {input} -format acc | ~/edirect/elink -target sra | ~/edirect/efetch -db sra -format runinfo > {output} 2> {log}
        """
checkpoint download_FASTQ:
    input:
        "results/runinfo_all.txt"
    output:
        directory("results/fastq_files")
    log:
        "logs/download_FASTQ.log"
    shell:
        """
        eval "$(conda shell.bash hook)"
        conda activate newenv
        mkdir -p {output}
        cat {input} | awk -F',' 'NR>1 {{print $1}}' | while read SRR; do
            if ! fastq-dump --split-3 $SRR -O {output}; then
                echo "Error in downloading $SRR" >> {log}
                exit 1
            fi
        done
        conda deactivate
        """

rule trim_fastq:
    input:
        R1="results/fastq_files/{sample}_1.fastq",
        R2="results/fastq_files/{sample}_2.fastq"
    output:
        trimmed_R1="results/trimmed/{sample}_1.trimmed.fastq",
        trimmed_R2="results/trimmed/{sample}_2.trimmed.fastq",
        report="results/trimmed/{sample}_fastp_report.html"
    log:
        "logs/trim_fastq/{sample}.log"
    conda:
        "fastp_env.yaml"
    shell:
        """
        mkdir -p results/trimmed
        fastp -i {input.R1} -I {input.R2} -o {output.trimmed_R1} -O {output.trimmed_R2} --html {output.report} &> {log}
        """

rule assembly:
    input:
        trimmed_R1="results/trimmed/{sample}_1.trimmed.fastq",
        trimmed_R2="results/trimmed/{sample}_2.trimmed.fastq"
    output:
        contigs="results/assembly/{sample}/assembly/contigs.fasta"
    log:
        "logs/assemble/{sample}.log"
    conda:
        "assembly_env.yaml"
    threads: 8
    resources:
        mem_mb=16000,
        runtime=60
    shell:
        """
        mkdir -p results/assembly/{wildcards.sample}/assembly
        spades.py -1 {input.trimmed_R1} -2 {input.trimmed_R2} \
                  -o results/assembly/{wildcards.sample}/assembly --isolate \
                  --threads {threads} &> {log}
        """

rule run_amrfinder:
    input:
        "results/assembly/{sample}/assembly/contigs.fasta"
    output:
        "results/amrfinder/{sample}/amrfinderplus.tsv"
    log:
        "logs/amrfinder/{sample}.log"
    conda:
        "amrfinder_env.yaml"
    params:
        organism="Staphylococcus_aureus",
        database="/scratch/ss68343/Shanita_1st_snakemake_pipeline/.snakemake/conda/e47ce7b00eac592ffe11980a26b4a0d8_"
    resources:
        mem_mb=8000,
        runtime=60
    shell:
        """
        mkdir -p results/amrfinder/{wildcards.sample}
        mkdir -p logs/amrfinder
        amrfinder -n {input} --organism {params.organism} --name {wildcards.sample} -o {output} >> {log} 2>&1
        """








